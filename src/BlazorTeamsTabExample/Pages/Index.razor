@page "/"

<h1 style="color:#6364a5">Hello, Teams!</h1>

<p>
    This sample demonstrates silent authentication in a Microsoft Teams tab.
</p>
<p>
    The tab will try to get an id token for the user silently and information about the user.
    The "Login" button will appear only if silent authentication failed.
</p>

<!-- Login button -->
<button id="btnLogin" onclick="login()" style="display: none">Login to Azure AD</button>

<p id="divError" style="display: none" class="auth-data"></p>

<!-- Logout button -->
<button id="btnLogout" onclick="logout()" style="display: none">Logout (Silent)</button>

<ClientScript>
    <script>
        var mycontext;

        microsoftTeams.initialize();

        microsoftTeams.getContext(function (context) {
            console.log(context)
            window.localStorage.setItem('teamsContext_', JSON.stringify(context));
        });

        // Parse query parameters
        let queryParams = getQueryParameters();
        let loginHint = queryParams["loginHint"];
        let userObjectId = queryParams["userObjectId"];
        // Use the tenant id of the current organization. For guest users, we want an access token for
        // the tenant we are currently in, not the home tenant of the guest.
        let tenantId = queryParams["tenantid"] || "common";

        console.log(queryParams);

        // ADAL.js configuration
        let config = {
            tenant: tenantId,
            clientId: "dd5cf059-1957-4a5d-beec-7e70f57760f5",
            redirectUri: "https://19053e3e1bb7.ngrok.io/silent-end",     // This should be in the list of redirect uris for the AAD app
            cacheLocation: "localStorage",
            navigateToLoginRequestUrl: false,
            // Setup extra query parameters for ADAL
            // - openid and profile scope adds profile information to the id_token
            // - login_hint provides the expected user name
            extraQueryParameter: "scope=openid+profile&login_hint=" + encodeURIComponent(loginHint),
        };
        // Setup extra query parameters for ADAL
        // - openid and profile scope adds profile information to the id_token
        // - login_hint provides the expected user name
        if (loginHint) {
            config.extraQueryParameter = "scope=openid+profile&login_hint=" + encodeURIComponent(loginHint);
        } else {
            config.extraQueryParameter = "scope=openid+profile";
        }
        let authContext = new AuthenticationContext(config);
        // See if there's a cached user and it matches the expected user
        let user = authContext.getCachedUser();
        if (user && (user.profile.oid !== userObjectId)) {
            // User doesn't match, clear the cache
            authContext.clearCache();
        }
        // Get the id token (which is the token for resource = clientId)
        authContext.acquireToken(config.clientId, function (errDesc, token, err, tokenType) {
            if (token) {
                // When there's no cached user, ADAL.js 1.0.17 returns an access token in the callback even when asked for the id token.
                // To work around this bug, check the token type; if it's not an id token, get the id token from cache.
                if (tokenType !== authContext.CONSTANTS.ID_TOKEN) {
                    console.log("ADAL.js bug: requested id_token, got " + tokenType);

                    token = authContext.getCachedToken(config.clientId);
                }
                //  showUserInformation(token);
            } else {

                // Failed to get the id token silently; show the login button
                $("#btnLogin").css({ display: "" });
                // You could attempt to launch the login popup here, but in browsers this could be blocked by
                // a popup blocker, in which case the login attempt will fail with the reason FailedToOpenWindow.
            }
        });

        // To get an access token to a resource like Graph,
        // 1. Provide the resource id to acquireToken()
        //        authContext.acquireToken("https://graph.microsoft.com", function (errDesc, token, err, tokenType) { ... })
        // 2. Remove the check for tokenType from the callback, because access token is the correct type.
        // 3. In the success callback below, call acquireToken again.

        authContext.acquireToken('https://graph.microsoft.com', function (error, token) {
            if (error || !token) {
                // TODO: Handle error obtaining access token
                document.getElementById('api_response').textContent =
                    'ERROR:\n\n' + error;
                console.log("Failed to get access token silently: " + error);
                return;
            }
            // Use the access token
            window.localStorage.setItem('adal.accesstoken_', token);

            // redirect user to blazor component
            window.location.replace("https://19053e3e1bb7.ngrok.io/graph-test");
        });


        // Interactive login to Azure AD
        function login() {
            $(".auth-data").css({ display: "none" });
            microsoftTeams.authentication.authenticate({
                url: "https://19053e3e1bb7.ngrok.io/silent-start",
                width: 600,
                height: 535,
                successCallback: function (result) {
                    // AuthenticationContext is a singleton
                    let authContext = new AuthenticationContext();
                    let idToken = authContext.getCachedToken(config.clientId);
                    if (idToken) {

                        //console.log(idToken);
                        //// Use the access token
                        //window.localStorage.setItem('adal.accesstoken_', idToken);

                        //// redirect user to blazor component
                        //window.location.replace("https://19053e3e1bb7.ngrok.io/graph-test");

                    } else {
                        console.error("Error getting cached id token. This should never happen.");
                        // At this point we have to get the user involved, so show the login button
                        $("#btnLogin").css({ display: "" });
                    };
                },
                failureCallback: function (reason) {
                    console.log("Login failed: " + reason);
                    if (reason === "CancelledByUser" || reason === "FailedToOpenWindow") {
                        console.log("Login was blocked by popup blocker or canceled by user.");
                    }
                    // At this point we have to get the user involved, so show the login button
                    $("#btnLogin").css({ display: "" });
                    $(".auth-data").css({ display: "none" });
                    $("#divError").text(reason).css({ display: "" });
                }
            });
        }
        // Parse query parameters into key-value pairs
        function getQueryParameters() {
            let queryParams = {};
            location.search.substr(1).split("&").forEach(function (item) {
                let s = item.split("="),
                    k = s[0],
                    v = s[1] && decodeURIComponent(s[1]);
                queryParams[k] = v;
            });
            return queryParams;
        }

        // Demonstrates silent logout - simply clears the loginHint, replaces the value of userObjectId with a dummy value, and reloads the page
        function logout() {
            let url = location.href.split("?")[0] + "?";
            let queryParams = getQueryParameters();
            delete queryParams["loginHint"];
            queryParams["userObjectId"] = "00000000-0000-0000-000000000000";
            for (var k in queryParams) {
                url = url + k + "=" + encodeURIComponent(queryParams[k]) + "&";
                console.log(k);
            }
            location.href = url;
        }
    </script>

</ClientScript>